{
  "_args": [
    [
      {
        "raw": "grunt-http@^1.6.0",
        "scope": null,
        "escapedName": "grunt-http",
        "name": "grunt-http",
        "rawSpec": "^1.6.0",
        "spec": ">=1.6.0 <2.0.0",
        "type": "range"
      },
      "/var/www/html"
    ]
  ],
  "_from": "grunt-http@>=1.6.0 <2.0.0",
  "_id": "grunt-http@1.6.0",
  "_inCache": true,
  "_location": "/grunt-http",
  "_nodeVersion": "0.12.0",
  "_npmUser": {
    "name": "johngeorgewright",
    "email": "johngeorge.wright@gmail.com"
  },
  "_npmVersion": "2.5.1",
  "_phantomChildren": {
    "aws-sign2": "0.5.0",
    "bl": "0.9.5",
    "combined-stream": "0.0.7",
    "forever-agent": "0.5.2",
    "http-signature": "0.10.1",
    "json-stringify-safe": "5.0.1",
    "mime": "1.2.11",
    "mime-types": "1.0.2",
    "node-uuid": "1.4.8",
    "qs": "2.3.3",
    "stringstream": "0.0.5",
    "tough-cookie": "2.3.2",
    "tunnel-agent": "0.4.3"
  },
  "_requested": {
    "raw": "grunt-http@^1.6.0",
    "scope": null,
    "escapedName": "grunt-http",
    "name": "grunt-http",
    "rawSpec": "^1.6.0",
    "spec": ">=1.6.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/grunt-http/-/grunt-http-1.6.0.tgz",
  "_shasum": "944e495549165acd7d0cfe1d10b612a3dae1300d",
  "_shrinkwrap": null,
  "_spec": "grunt-http@^1.6.0",
  "_where": "/var/www/html",
  "author": {
    "name": "John Wright",
    "email": "johngeorge.wright@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/johngeorgewright/grunt-http/issues"
  },
  "dependencies": {
    "async": "^0.9.0",
    "aws-sign2": "~0.5.0",
    "form-data": "~0.1.0",
    "hawk": "~2.3.0",
    "http-signature": "~0.10.0",
    "oauth-sign": "~0.4.0",
    "request": "~2.47.0",
    "tough-cookie": ">=0.12.0",
    "tunnel-agent": "~0.4.0"
  },
  "description": "Sends a HTTP request and deals with the response.",
  "devDependencies": {
    "form-data": "^0.1.2",
    "grunt": "~0.4.1",
    "grunt-contrib-clean": "~0.6.0",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-nodeunit": "~0.4.1",
    "sinon": "~1.10.3"
  },
  "directories": {},
  "dist": {
    "shasum": "944e495549165acd7d0cfe1d10b612a3dae1300d",
    "tarball": "https://registry.npmjs.org/grunt-http/-/grunt-http-1.6.0.tgz"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "gitHead": "4c033e0c46b0afc06d718ba69aa10bb49146f7b6",
  "homepage": "https://github.com/johngeorgewright/grunt-http",
  "keywords": [
    "gruntplugin",
    "request",
    "http"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/johngeorgewright/grunt-http/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "maintainers": [
    {
      "name": "johngeorgewright",
      "email": "johngeorge.wright@gmail.com"
    }
  ],
  "name": "grunt-http",
  "optionalDependencies": {
    "aws-sign2": "~0.5.0",
    "form-data": "~0.1.0",
    "hawk": "~2.3.0",
    "http-signature": "~0.10.0",
    "oauth-sign": "~0.4.0",
    "tough-cookie": ">=0.12.0",
    "tunnel-agent": "~0.4.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "readme": "# grunt-http\n\n> Sends a HTTP request and deals with the response.\n\n[![NPM](https://nodei.co/npm/grunt-http.png)](https://nodei.co/npm/grunt-http)\n\n[![NPM](https://nodei.co/npm-dl/grunt-http.png)](https://nodei.co/npm/grunt-http)\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-http --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-http');\n```\n\n## The \"http\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `http` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  http: {\n    your_service: {\n      options: {\n        url: 'your/url.com',\n      },\n      dest: 'optional/file/to/save/response'\n    }\n  }\n})\n```\n\nIf you add a source file, the contents will be added to the `body` option unless another field is specified in the `sourceField` option.\n\n### Options\n\ngrunt-http uses the [request](https://github.com/mikeal/request) module under the hood, and apart from a couple specific to grunt-http options, the rest get passed straight to it. Here's a copy of the of the module's option docs. Otherwise, [go to the repo](https://github.com/mikeal/request) and have a look at what's it's capable of.\n\n- `uri || url` - fully qualified URI or a parsed URL object from url.parse(). REQUIRED.\n- `callback` - A function that will receive an `error`, `response` and `body`, after a response if finished\n- `qs` - object containing querystring values to be appended to the URI\n- `method` - http method, defaults to GET\n- `headers` - http headers, defaults to {}\n- `body` - entity body for PATCH, POST and PUT requests. Must be buffer or string or a function returning a string or buffer.\n- `sourceField` - A field in the body or form to add the source files' contents to. Can contain full stops to separate object path. IE \"form.js\\_code\".\n- `form` - When passed an object, this sets body to a querystring representation of value, and adds Content-type: application/x-www-form-urlencoded; charset=utf-8 header. When passed no options, a FormData instance is returned (and is piped to request). For `multipart/form-data` install the optional dependency `npm i form-data`.\n- `auth` - A hash containing values user || username, password || pass, and sendImmediately (optional). [See more info here](https://github.com/mikeal/request#http-authentication).\n- `json` - sets body but to JSON representation of value and adds Content-type: application/json header. Additionally, parses the response body as json. Must be buffer or string or a function returning a string or buffer.\n- `multipart` - (experimental) array of objects which contains their own headers and body attribute. Sends multipart/related request. See example below.\n- `followRedirect` - follow HTTP 3xx responses as redirects. defaults to true.\n- `followAllRedirects` - follow non-GET HTTP 3xx responses as redirects. defaults to false.\n- `maxRedirects` - the maximum number of redirects to follow, defaults to 10.\n- `encoding` - Encoding to be used on setEncoding of response data. If set to null, the body is returned as a Buffer.\n- `pool` - A hash object containing the agents for these requests. If omitted this request will use the global pool which is set to node's default maxSockets.\n- `pool.maxSockets` - Integer containing the maximum amount of sockets in the pool.\n- `timeout` - Integer containing the number of milliseconds to wait for a request to respond before aborting the request\n- `proxy` - An HTTP proxy to be used. Support proxy Auth with Basic Auth the same way it's supported with the url parameter by embedding the auth info in the uri.\n- `oauth` - Options for OAuth HMAC-SHA1 signing. [See more info here](https://github.com/mikeal/request#oauth-signing). The `oauth-sign` module must be installed to use this functionality.\n- `hawk` - Options for [Hawk signing](https://github.com/hueniverse/hawk). The credentials key must contain the necessary signing info, [see hawk docs for details](https://github.com/hueniverse/hawk#usage-example). You will need to install the `hawk` module to use this functionality.\n- `strictSSL` - Set to true to require that SSL certificates be valid. Note: to use your own certificate authority, you need to specify an agent that was created with that ca as an option.\n- `jar` - If true, remember cookies for future use (or define your custom cookie jar; [see mikeal/request's examples](https://github.com/mikeal/request#examples)). To get either of these functions working you'll need to install an optional dependecy `npm i tough-cookie`.\n- `aws` - object containing aws signing information, should have the properties key and secret as well as bucket unless you're specifying your bucket as part of the path, or you are making a request that doesn't use a bucket (i.e. GET Services). You will need to install the `aws-sign2` module to use this functionality.\n- `httpSignature` - Options for the [HTTP Signature Scheme](https://github.com/joyent/node-http-signature/blob/master/http_signing.md) using [Joyent's library](https://github.com/joyent/node-http-signature). The `http-signature` module must be installed and the keyId and key properties must be specified.\n- `localAddress` - Local interface to bind for network connections.\n- `ignoreErrors` - Ignore the status code returned (if any).\n- `logBody` - Outputs the response body in the logs.  This can also be set at runtime by using --logBody=true on the command.\n\nThere are a few optional dependencies you'll need to install to get certain functionality from this module.\n\n- if you wish to use cookies (`jar`) install `tough-cookie`\n- if you want to pass `multipart/form-data` you'll need to install `form-data`\n- if you wish to tunnel your requests install `tunnel-agent`\n- if you want to use Joyent's HTTP Signature Scheme, install `http-signature`\n- if you require oauth signing, you need to install the `oauth-sign` module\n- to use Hawk signing, you must use the `hawk` module\n- if you want to use AWS signing, you must install the `aws-sign2` module\n\n#### Google Closure\nIn this example, we're using google's closure service to compile a JS file.\n\n```js\ngrunt.initConfig({\n  http: {\n    closure: {\n      options: {\n        url: 'http://closure-compiler.appspot.com/compile',\n        method: 'POST',\n        form: {\n          output_info: 'compiled_code',\n          output_format: 'text',\n          compilation_level: 'SIMPLE_OPTIMIZATIONS',\n          warning_level: 'default'\n        },\n        sourceField: 'form.js_code'\n      },\n      files: {\n        'build/main.js': 'src/main.js'\n      }\n    }\n  }\n});\n```\n\n#### multipart/form-data\nIn this example we're going to access the form data object directly to add an image to the POST fields.\n\n*Note, you need to install the `form-data` package before you can use this method.*\n\n```js\nvar path = require('path');\n\ngrunt.initConfig({\n  http: {\n    multipart: {\n      options: {\n        url: 'http://posttestserver.com/post.php?dir=grunt-http',\n        method: 'POST',\n        form: function (form) {\n          form.append('file', grunt.file.read(path.join(__dirname, 'images', 'pic.png')));\n        }\n      }\n    }\n  }\n});\n```\n\n#### Multiple target\nThis is just a reminder of how to use Grunt's multiple task syntax which is also available in `grunt-http`. If you want to specify more than one task you can list them like so:\n\n```js\ngrunt.initConfig({\n  http: {\n    myFirstService: {\n      options: {\n        url: 'http://my-first-url.com'\n      }\n    },\n    mySecondService: {\n      options: {\n        url: 'http://my-second-url.com'\n      }\n    },\n    myThirdService: {\n      options: {\n        url: 'http://my-third-url.com'\n      }\n    }\n  }\n});\n```\n\nWith the above configuration you can call all 3 services with one command `grunt http`. Or, if you just want to call one; `grunt http:mySecondService`.\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## [Release History](/johngeorgewright/grunt-http/releases)\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/johngeorgewright/grunt-http.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "1.6.0"
}

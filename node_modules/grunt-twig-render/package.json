{
  "_args": [
    [
      {
        "raw": "grunt-twig-render@^1.7.2",
        "scope": null,
        "escapedName": "grunt-twig-render",
        "name": "grunt-twig-render",
        "rawSpec": "^1.7.2",
        "spec": ">=1.7.2 <2.0.0",
        "type": "range"
      },
      "/var/www/html"
    ]
  ],
  "_from": "grunt-twig-render@>=1.7.2 <2.0.0",
  "_id": "grunt-twig-render@1.8.1",
  "_inCache": true,
  "_location": "/grunt-twig-render",
  "_nodeVersion": "6.5.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/grunt-twig-render-1.8.1.tgz_1492683363668_0.8832340519875288"
  },
  "_npmUser": {
    "name": "stefanullinger",
    "email": "stefan@slicemenice.de"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {
    "ansi-styles": "2.2.1",
    "escape-string-regexp": "1.0.5",
    "supports-color": "2.0.0"
  },
  "_requested": {
    "raw": "grunt-twig-render@^1.7.2",
    "scope": null,
    "escapedName": "grunt-twig-render",
    "name": "grunt-twig-render",
    "rawSpec": "^1.7.2",
    "spec": ">=1.7.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/grunt-twig-render/-/grunt-twig-render-1.8.1.tgz",
  "_shasum": "dd969ad731a05fcab818a855b9255c33f973c7ee",
  "_shrinkwrap": null,
  "_spec": "grunt-twig-render@^1.7.2",
  "_where": "/var/www/html",
  "author": {
    "name": "Stefan Ullinger",
    "email": "stefan@slicemenice.de",
    "url": "http://www.slicemenice.de"
  },
  "bugs": {
    "url": "https://github.com/sullinger/grunt-twig-render/issues"
  },
  "dependencies": {
    "chalk": "1.1.1",
    "json5": "0.5",
    "merge": "^1.1.3",
    "object.omit": "^2.0.1",
    "twig": "1.10.4"
  },
  "description": "Render twig templates",
  "devDependencies": {
    "grunt": "^1.0.1",
    "grunt-contrib-clean": "1.0.0",
    "grunt-contrib-jshint": "1.0.0",
    "grunt-contrib-nodeunit": "1.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "dd969ad731a05fcab818a855b9255c33f973c7ee",
    "tarball": "https://registry.npmjs.org/grunt-twig-render/-/grunt-twig-render-1.8.1.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gitHead": "00b142573b139eae2d2b6f42ae3ace671173037e",
  "homepage": "https://github.com/sullinger/grunt-twig-render",
  "keywords": [
    "gruntplugin",
    "twig"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/sullinger/grunt-twig-render/blob/master/LICENSE-MIT"
    }
  ],
  "maintainers": [
    {
      "name": "stefanullinger",
      "email": "stefan@slicemenice.de"
    }
  ],
  "name": "grunt-twig-render",
  "optionalDependencies": {
    "json5": "0.5"
  },
  "peerDependencies": {
    "grunt": ">=0.4.5"
  },
  "readme": "# grunt-twig-render\n\n[![Build Status](https://travis-ci.org/stefanullinger/grunt-twig-render.svg?branch=master)](https://travis-ci.org/stefanullinger/grunt-twig-render)\n[![npm version](https://badge.fury.io/js/grunt-twig-render.svg)](https://badge.fury.io/js/grunt-twig-render)\n\n> Render twig templates\n\n## Getting Started\nThis plugin requires Grunt `~0.4.5`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-twig-render --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-twig-render');\n```\n\n## The \"twigRender\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `twigRender` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  twigRender: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      options: {\n        // Target specific options go here\n      },\n      files : [\n        {\n          data: // Path to JSON, JSON5 or YAML file, or POJO, or Array of filepaths and POJO\n          template: // Path to template file\n          dest: // Path to output destination here\n        }\n      ]\n    },\n  },\n});\n```\nYou can also use [Grunt built-in files syntax](http://gruntjs.com/configuring-tasks#files) for more dynamic lists.\nIn that case, one of `data` or `template` must be specified, the other one will use the dynamic `src` property.\n\n**Note:** The `files` parameter _must_ be an array, and _must_ conform to the format specified above. Each object in the file array represents _one_ rendered template.\n\n#### Examples:\n\n```js\nfiles: [\n  {\n    data: \"path/to/data/file.json\",\n    template: \"path/to/template.twig\",\n    dest: \"file/to/output.html\"\n  }\n]\n```\n\n```js\nfiles: [\n  {\n    data: {\n      greeting: \"Hello\",\n      target: \"world\"\n    },\n    template: \"path/to/template.twig\",\n    dest: \"file/to/output.html\"\n  }\n]\n```\n\nCompile all your templates, with data from a central data file:\n```js\ngrunt.initConfig({\n  twigRender: {\n    your_target: {\n      files : [\n        {\n          data: 'path/to/datafile.json',\n          expand: true,\n          cwd: 'path/to/templates/',\n          src: ['**/*.twig', '!**/_*.twig'], // Match twig templates but not partials\n          dest: 'path/to/output/',\n          ext: '.html'   // index.twig + datafile.json => index.html\n        }\n      ]\n    },\n  },\n});\n```\n\nCompile a list of posts, same template but different data files:\n```js\ngrunt.initConfig({\n  twigRender: {\n    your_target: {\n      files : [\n        {\n          template: 'path/to/template.twig',\n          expand: true,\n          cwd: 'path/to/data/',\n          src: ['post*.json'], // post1.json, post2.json,...\n          dest: 'path/to/output/',\n          ext: '.html'   // post1.json + template.twig => post1.html\n        }\n      ]\n    },\n  },\n});\n```\n\n### Data parameter\n\nThe `data` parameter accepts multiple formats, here is a detailed description of each.\n\n#### filename (string): JSON, JSON5 or YAML\nJSON file should end in `.json`, YAML in `.yml`.\n\n[JSON5](http://json5.org/) is an extension to standard JSON, allowing (among other things) comments and multi-line strings.\nThis is an optional format, to enable it you need to install JSON5:\n```sh\nnpm install json5\n```\nThen simply set `data` to the path of a json5 file (ending in `.json` or `.json5`).\n\n#### Javascript object\nUsed as is.\n\n#### Array\nEach element of the array can be any of the accepted format, results are merged.\nIn case of conflicts, last data in the array has priority.\n\n\n### dataPath\nAn optional `dataPath` string can be supplied, in dot notation format.\nIf supplied, renderer will look for it in the loaded data and pass it as `dataPath` property to the template.\nThis lets you call the same template with different parts of the data tree.\n```js\nfiles: [\n  {\n    data: {\n      post: {\n        title: \"a new post\",\n        content: \"about life\"\n        info: {\n          published: \"2014/09/12\",\n          size: 1234,\n          author: \"John Doe\"\n        }\n      }\n    }\n    dataPath: \"post.info\",\n  },\n```\nThen in template `post.twig` use `{{dataPath.published}}` directly\n\n### Multiple destinations\n\nIf the data parameter results in an array\n(either through dataPath or as file containing a Javascript array),\nthen multiple destination files are generated.\nTheir names are the `destination` parameter with '_(number)' appended to the filename.\n\nFor example:\n###### data.json\n```json\n{\n  \"posts\": [\n    {\n      \"title\": \"first post\",\n      \"content\": \"Lorem ipsum dolor sit amet, consectetur adipisicing elit.\"\n    },\n    {\n      \"title\": \"another post\",\n      \"content\": \"Fugiat enim, at sit natus temporibus maxime repudiandae.\"\n    }\n  ]\n}\n```\n###### one_post.twig\n```twig\n<h1>{{dataPath.title}}</h1>\n<p>{{dataPath.content}}</p>\n```\n###### Gruntfile\n```js\ngrunt.initConfig({\n  twigRender: {\n    your_target: {\n      files : [\n        {\n          data: \"path/to/data/data.json\",\n          dataPath: \"posts\",\n          template: \"path/to/one_post.twig\",\n          dest: \"file/to/post.html\"\n        }\n      ]\n    },\n  },\n});\n```\n###### Files generated\n```\npost_0.html\npost_1.html\n\n```\n\n### Flattening\n\nIf the data parameter results in a tree (that is, an array containing some arrays),\nyou can use the `flatten` property to reduce this into a list:\n\n#####data.json\n```json\n{\n  \"menu\": [\n    {\"label\": \"action1\"},\n    {\"label\": \"action2\"},\n    {\n      \"label\": \"sub-menu\",\n      \"actions\": [\n        {\"label\": \"action3\"},\n        {\"label\": \"action4\"}\n      ]\n    }\n  ]\n}\n```\n\n#####Gruntfile\n```js\nfiles: [\n  {\n    data: \"data.json\",\n    dataPath: \"menu\",\n    flatten: \"actions\"\n    template: \"myTemplate.twig\",\n    dest: \"myDest.html\"\n  },\n```\n\nWill result in 4 files (`myDest_0-3.html`)\n\n\n\n### Options\n\n#### options.cache\nType: `Boolean`\nDefault value: `false`\n\nIndicates if Twig should use a template cache or read template file every time.\nDefault is set to false to enable template file watch and recompilation.\nSet it to true if you need to generate lots of files with an identical template.\n\n#### options.extensions\nType: `Array`\nDefault value: `[]`\n\nCan be an array of functions that extend TwigJS.\n\n##### Example 1: Filter Extension\n\n```js\noptions:\n{\n  extensions:\n  [\n\n    // Usage: {{ [1, 2, 3]|fooJoin(' | ') }}\n    // Output: 1 | 2 | 3\n\n    function(Twig)\n    {\n      Twig.exports.extendFilter( \"fooJoin\", function(value, params)\n      {\n        if (value === undefined || value === null)\n        {\n          return;\n        }\n\n        var join_str = \"\",\n            output = [],\n            keyset = null;\n\n        if (params && params[0])\n        {\n          join_str = params[0];\n        }\n\n        if (value instanceof Array)\n        {\n          output = value;\n        }\n        else\n        {\n          keyset = value._keys || Object.keys(value);\n\n          Twig.forEach(keyset, function(key)\n          {\n            if (key === \"_keys\")\n            {\n              return; // Ignore the _keys property\n            }\n\n            if (value.hasOwnProperty(key))\n            {\n              output.push(value[key]);\n            }\n          });\n        }\n\n        return output.join(join_str);\n      });\n    }\n\n  ]\n}\n```\n\n##### Example 2: Function Extension\n\n```js\noptions:\n{\n  extensions:\n  [\n\n    // Usage:\n    //   {% for i in 1..3 %}\n    //   {{ fooCycle(['odd', 'even'], i) }}\n    //   {% endfor %}\n\n    // Output:\n    //   even\n    //   odd\n    //   even\n\n    function(Twig)\n    {\n      Twig.exports.extendFunction( \"fooCycle\", function(arr, i)\n      {\n        var pos = i % arr.length;\n        return arr[pos];\n      });\n    },\n\n\n    // load data dynamically from file\n\n    // Usage:\n    //   data.json: { \"test\": \"foobar\" }\n    //   {% set mydata = data(\"path/to/jsonOrYml/data.json\") %}\n    //   {{ mydata.test }}   \n\n    // Output:\n    //   foobar\n\n    function(Twig)\n    {\n      Twig.exports.extendFunction('data', function(filename)\n      {\n        var namespace_path = Twig.path.parsePath.apply(this, [this, filename]);\n\n        if (/\\.yml$/i.test(namespace_path) || /\\.yaml/i.test(namespace_path)){\n          return grunt.file.readYAML(namespace_path);\n        } else {\n          return grunt.file.readJSON(namespace_path);\n        }\n      });\n    }\n\n  ]\n}\n```\n\n##### Example 3: Tag Extension\n\n```js\noptions:\n{\n  extensions:\n  [\n\n    // Usage:\n    //   {% fooSpaceless %}<div>\n    //   <b>b</b>   <i>i</i>\n    //   </div>{% endFooSpaceless %}\n\n    // Output:\n    //   <div><b>b</b><i>i</i></div>\n\n\n    function(Twig)\n    {\n      Twig.exports.extendTag(\n      {\n        type: \"fooSpaceless\",\n        regex: /^fooSpaceless$/,\n        next: [\n          \"endFooSpaceless\"\n        ],\n        open: true,\n\n        // Parse the html and return it without any spaces between tags\n        parse: function (token, context, chain)\n        {\n          // Parse the output without any filter\n          var unfiltered = Twig.parse.apply(this, [token.output, context]),\n\n          // A regular expression to find closing and opening tags with spaces between them\n          rBetweenTagSpaces = />\\s+</g,\n\n          // Replace all space between closing and opening html tags\n          output = unfiltered.replace(rBetweenTagSpaces,'><').trim();\n\n          return {\n            chain: chain,\n            output: output\n          };\n        }\n      });\n    },\n\n    function(Twig)\n    {\n      Twig.exports.extendTag(\n      {\n        type: \"endFooSpaceless\",\n        regex: /^endFooSpaceless$/,\n        next: [ ],\n        open: false\n      });\n    }\n\n  ]\n}\n```\n\n##### Example 4: Change TwigJS Settings via an Extension\n\n```js\noptions:\n{\n  extensions:\n  [\n\n    function(Twig)\n    {\n      // Although it might not be obvious, you have access to the Twig instance within this function\n      // and can configure TwigJS as you like\n\n      // disables caching\n      Twig.cache = false;\n    }\n\n  ]\n}\n```\n\n#### options.functions\nType: `Object`\nDefault value: `{}`\n\nObject hash defining functions in TwigJS. \n\n##### Example 1: Add asset function to TwigJS\n```js\n  options {\n    functions: {\n      asset: function(arg) { return 'my-asset-location/' + arg; }\n    }\n  }\n```\n\n#### options.filters\nType: `Object`\nDefault value: `{}`\n\nObject hash defining filters in TwigJS. \n\n##### Example 1: Add dots filter to TwigJS\n```js\n  options {\n    filters: {\n      dots: function(arg) { return arg + '...'; }\n    }\n  }\n```\n\nFor a complete list of available params see the [official twigjs documentation](https://github.com/twigjs/twig.js)\n\n## Release History\n\n__1.8.1__\n\n  * Updated twig.js to 1.10.4.\n\n__1.8.0__\n\n  * Allows to use all available twigjs parameters and provides a more lightweight way to define custom functions and filters.\n\n__1.7.4__\n\n  * Updated twig.js to 0.10.0.\n\n__1.7.3__\n\n  * Updated twig.js to 0.8.8.\n\n__1.7.2__\n\n  * Twig errors now cause grunt task to fail and logs the error.\n\n__1.7.1__\n\n  * bugfix: array of data did not merge objects recursively, now does.\n\n__1.7.0__\n\n  * added `cache` option to enable/disable Twig caching (needed for livereload).\n\n__1.6.0__\n\n  * added `flatten` option to flatten data lists for multi-files generation.\n\n__1.5.0__\n\n  * task renamed to `twigRender` (was `twig_render`), to comply with Javascript conventions and make jshint happy in client codes.\n\n__1.4.1__\n  * dataPath returns full data object with additional `dataPath` property, instead of just the data pointed to (allows template to access full context).\n\n__1.4.0__\n\n  * dataPath parameter, to load sub-part of a data structure.\n  * data arrays to generate multiple destinations.\n\n\n__1.3.0__\n\n  * Use src for data or template, allowing globbing and more\n  * Allow use of JSON5, if library is present (optional).\n\n__1.2.0__\n\n  * Allowing data to be an array of strings/objects.\n\n__1.1.0__\n\n  * Added support for YAML data files.\n\n__1.0.1__\n\n  * Added debug output when the target file has been written.\n\n__1.0.0__\n\n  * Rechecked code. Seems to be fine – releasing version 1.0.0.\n\n__0.3.1__\n\n  * Updated version string.\n\n__0.3.0__\n\n  * Added option to extend TwigJS functionality (filters, functions, tags).\n\n__0.2.0__\n\n  * Added basic tests.\n\n__0.1.0__\n\n  * Defined twigRender task.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/sullinger/grunt-twig-render.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "1.8.1"
}
